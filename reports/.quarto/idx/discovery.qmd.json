{"title":"Discovery","markdown":{"yaml":{"title":"Discovery"},"headingText":"Summary","containsRefs":false,"markdown":"\n\nThis report documents a series of prompts with ChatGPT to learn more about the project.  Here is the version I'm using:\n\nOpenAI. (2024). ChatGPT (February 2024 version) [Large language model]. Retrieved from https://openai.com/chatgpt\n\n\nIn the prompts below I asked ChatGPT to provide a framework for creating a *service catalog* where a user\ncan select the power/size of a *virtual machine* from a menu.\n\nChatGPT provided several options.  These looked *pricey* so I asked if there were options that could live within\nthe *free tier*.\n\nResponse: YES, there are several EC2 instances (t2.micro and t3.micro) that are available to the free tier.\n\nBecause your developing a proof-of-concept, I suggest that you focus your development on the framework/service catalog\nstubbing out your various VM options using *t2.micro* and *t3.micro*.  This will minimize resource\ncosts, and once your ready for production testing, you can swap to larger, more realistic, and more pricey options.\n\n\n\n::: {style=\"background-color: lightgray; padding: 5px 0; margin 5px 0\"}\n# Prompt 1\n:::\n\n\nBelow is my first prompt. You can copy/paste this into chatGPT.\n\n Scroll you mouse over the text box to get a \"copy to clipboard\" icon in the top right of the text box.\n\n```bash\ni use AWS. My colleagues often need access to virtual machines. Rather \nthan having them set up them up themselves, i'd like to create a menu\napplication that let's them select how much memory and disk they need\nfor their specific purpose.  For example, they might choose between a \nsmall VM\", a \"medium sized VM\" and a large VM.\nHow should I approach this?\n```\n\n::: {style=\"background-color: lightgray;\"}\n## Response 1\n:::\n\nTo create a menu-driven application that allows colleagues to select AWS virtual machines based on predefined sizes (e.g., small, medium, large), you can follow this structured approach:\n\n### 1. **Define VM Profiles**\nCreate a mapping of instance types to resource allocations:\n- **Small VM**: 2 vCPUs, 4GB RAM, 50GB disk (`t3.small`)\n- **Medium VM**: 4 vCPUs, 8GB RAM, 100GB disk (`t3.medium`)\n- **Large VM**: 8 vCPUs, 16GB RAM, 200GB disk (`t3.large`)\n\n### 2. **Choose a Deployment Method**\nDecide how you want to deploy the application:\n- **CLI-based (Python and Click or Typer)**\n- **Web-based (Flask with Bootstrap UI)**\n- **AWS Lambda + API Gateway (for a serverless approach)**\n- **Slack/Discord Bot for Requests**\n\n### 3. **Use AWS SDK (Boto3) to Automate EC2 Creation**\nYou’ll need:\n- IAM permissions to create EC2 instances\n- The **boto3** Python library to interact with AWS services\n\nExample function to launch an instance:\n```python\nimport boto3\n\nec2 = boto3.client('ec2')\n\ndef create_instance(instance_type, volume_size, key_name, security_group):\n    response = ec2.run_instances(\n        ImageId=\"ami-12345678\",  # Replace with a valid AMI ID\n        InstanceType=instance_type,\n        MinCount=1,\n        MaxCount=1,\n        KeyName=key_name,\n        SecurityGroupIds=[security_group],\n        BlockDeviceMappings=[\n            {\n                \"DeviceName\": \"/dev/xvda\",\n                \"Ebs\": {\n                    \"VolumeSize\": volume_size,\n                    \"DeleteOnTermination\": True,\n                },\n            }\n        ]\n    )\n    instance_id = response['Instances'][0]['InstanceId']\n    print(f\"Instance {instance_id} created.\")\n    return instance_id\n```\n\n### 4. **Build a User-Friendly Menu**\n\n- **For CLI Users** (Python Click):\n\n```python\nimport click\n\n@click.command()\n@click.option(\"--size\", type=click.Choice([\"small\", \"medium\", \"large\"]), required=True)\ndef launch_vm(size):\n\tinstance_configs = {\n\t\t\"small\": (\"t3.small\", 50),\n\t\t\"medium\": (\"t3.medium\", 100),\n\t\t\"large\": (\"t3.large\", 200),\n\t}\n\tinstance_type, volume_size = instance_configs[size]\n\tcreate_instance(instance_type, volume_size, \"my-key\", \"sg-12345\")\n\nif __name__ == \"__main__\":\n\tlaunch_vm()\n```\n\n- **For Web Users** (Flask):\n  Create a simple web interface using Flask and Bootstrap to allow selection from a dropdown menu.\n\n### 5. **Permissions and Security**\n- Ensure your AWS IAM role has the correct **EC2 instance creation permissions**.\n- Use **AWS Systems Manager Session Manager** instead of SSH for access control.\n- Consider **tagging instances** for tracking and cleanup.\n\n### 6. **Automate Cleanup**\nSet up AWS Lambda or a scheduled job to check for unused instances and terminate them.\n\n\n::: {style=\"background-color: lightgray; padding: 5px 0; margin 5px 0\"}\n# Prompt 2\n:::\n\nHere is my second prompt. Again, you can cut/paste this into your copy of ChatGPT.\n\n```bash\ncan I access \"t3.small\", \"t3.medium\" and t3.large resources using a free account?\n```\n\n::: {style=\"background-color: lightgray;\"}\n## Response 2\n:::\n\nNo, AWS Free Tier does not cover **t3.small**, **t3.medium**, or **t3.large** instances. However, you can use **t2.micro** or **t3.micro** for free under the AWS Free Tier.\n\n### **AWS Free Tier Eligibility**\n- **t2.micro** and **t3.micro** are the only EC2 instances included in the Free Tier.\n- Free Tier allows **750 hours per month** for the first **12 months** after account creation.\n- After 12 months, you’ll be charged standard rates for all instances.\n\n### **Workarounds**\n1. **Use t3.micro Instead**  \n   If your workloads can fit within 1 vCPU and 1GB RAM, you can modify your script to allow **t3.micro** as an option.\n\n2. **Leverage Spot Instances**  \n   If your workload is flexible, consider **Spot Instances** to reduce costs.\n\n3. **Use AWS Educate or AWS Activate (for startups)**  \n   If you are a student or part of a startup, AWS offers **free credits** that may cover larger instances.\n\nWould you like me to modify the instance selection logic to default to Free Tier options when necessary?\n\n\n","srcMarkdownNoYaml":"\n\nThis report documents a series of prompts with ChatGPT to learn more about the project.  Here is the version I'm using:\n\nOpenAI. (2024). ChatGPT (February 2024 version) [Large language model]. Retrieved from https://openai.com/chatgpt\n\n## Summary\n\nIn the prompts below I asked ChatGPT to provide a framework for creating a *service catalog* where a user\ncan select the power/size of a *virtual machine* from a menu.\n\nChatGPT provided several options.  These looked *pricey* so I asked if there were options that could live within\nthe *free tier*.\n\nResponse: YES, there are several EC2 instances (t2.micro and t3.micro) that are available to the free tier.\n\nBecause your developing a proof-of-concept, I suggest that you focus your development on the framework/service catalog\nstubbing out your various VM options using *t2.micro* and *t3.micro*.  This will minimize resource\ncosts, and once your ready for production testing, you can swap to larger, more realistic, and more pricey options.\n\n\n\n::: {style=\"background-color: lightgray; padding: 5px 0; margin 5px 0\"}\n# Prompt 1\n:::\n\n\nBelow is my first prompt. You can copy/paste this into chatGPT.\n\n Scroll you mouse over the text box to get a \"copy to clipboard\" icon in the top right of the text box.\n\n```bash\ni use AWS. My colleagues often need access to virtual machines. Rather \nthan having them set up them up themselves, i'd like to create a menu\napplication that let's them select how much memory and disk they need\nfor their specific purpose.  For example, they might choose between a \nsmall VM\", a \"medium sized VM\" and a large VM.\nHow should I approach this?\n```\n\n::: {style=\"background-color: lightgray;\"}\n## Response 1\n:::\n\nTo create a menu-driven application that allows colleagues to select AWS virtual machines based on predefined sizes (e.g., small, medium, large), you can follow this structured approach:\n\n### 1. **Define VM Profiles**\nCreate a mapping of instance types to resource allocations:\n- **Small VM**: 2 vCPUs, 4GB RAM, 50GB disk (`t3.small`)\n- **Medium VM**: 4 vCPUs, 8GB RAM, 100GB disk (`t3.medium`)\n- **Large VM**: 8 vCPUs, 16GB RAM, 200GB disk (`t3.large`)\n\n### 2. **Choose a Deployment Method**\nDecide how you want to deploy the application:\n- **CLI-based (Python and Click or Typer)**\n- **Web-based (Flask with Bootstrap UI)**\n- **AWS Lambda + API Gateway (for a serverless approach)**\n- **Slack/Discord Bot for Requests**\n\n### 3. **Use AWS SDK (Boto3) to Automate EC2 Creation**\nYou’ll need:\n- IAM permissions to create EC2 instances\n- The **boto3** Python library to interact with AWS services\n\nExample function to launch an instance:\n```python\nimport boto3\n\nec2 = boto3.client('ec2')\n\ndef create_instance(instance_type, volume_size, key_name, security_group):\n    response = ec2.run_instances(\n        ImageId=\"ami-12345678\",  # Replace with a valid AMI ID\n        InstanceType=instance_type,\n        MinCount=1,\n        MaxCount=1,\n        KeyName=key_name,\n        SecurityGroupIds=[security_group],\n        BlockDeviceMappings=[\n            {\n                \"DeviceName\": \"/dev/xvda\",\n                \"Ebs\": {\n                    \"VolumeSize\": volume_size,\n                    \"DeleteOnTermination\": True,\n                },\n            }\n        ]\n    )\n    instance_id = response['Instances'][0]['InstanceId']\n    print(f\"Instance {instance_id} created.\")\n    return instance_id\n```\n\n### 4. **Build a User-Friendly Menu**\n\n- **For CLI Users** (Python Click):\n\n```python\nimport click\n\n@click.command()\n@click.option(\"--size\", type=click.Choice([\"small\", \"medium\", \"large\"]), required=True)\ndef launch_vm(size):\n\tinstance_configs = {\n\t\t\"small\": (\"t3.small\", 50),\n\t\t\"medium\": (\"t3.medium\", 100),\n\t\t\"large\": (\"t3.large\", 200),\n\t}\n\tinstance_type, volume_size = instance_configs[size]\n\tcreate_instance(instance_type, volume_size, \"my-key\", \"sg-12345\")\n\nif __name__ == \"__main__\":\n\tlaunch_vm()\n```\n\n- **For Web Users** (Flask):\n  Create a simple web interface using Flask and Bootstrap to allow selection from a dropdown menu.\n\n### 5. **Permissions and Security**\n- Ensure your AWS IAM role has the correct **EC2 instance creation permissions**.\n- Use **AWS Systems Manager Session Manager** instead of SSH for access control.\n- Consider **tagging instances** for tracking and cleanup.\n\n### 6. **Automate Cleanup**\nSet up AWS Lambda or a scheduled job to check for unused instances and terminate them.\n\n\n::: {style=\"background-color: lightgray; padding: 5px 0; margin 5px 0\"}\n# Prompt 2\n:::\n\nHere is my second prompt. Again, you can cut/paste this into your copy of ChatGPT.\n\n```bash\ncan I access \"t3.small\", \"t3.medium\" and t3.large resources using a free account?\n```\n\n::: {style=\"background-color: lightgray;\"}\n## Response 2\n:::\n\nNo, AWS Free Tier does not cover **t3.small**, **t3.medium**, or **t3.large** instances. However, you can use **t2.micro** or **t3.micro** for free under the AWS Free Tier.\n\n### **AWS Free Tier Eligibility**\n- **t2.micro** and **t3.micro** are the only EC2 instances included in the Free Tier.\n- Free Tier allows **750 hours per month** for the first **12 months** after account creation.\n- After 12 months, you’ll be charged standard rates for all instances.\n\n### **Workarounds**\n1. **Use t3.micro Instead**  \n   If your workloads can fit within 1 vCPU and 1GB RAM, you can modify your script to allow **t3.micro** as an option.\n\n2. **Leverage Spot Instances**  \n   If your workload is flexible, consider **Spot Instances** to reduce costs.\n\n3. **Use AWS Educate or AWS Activate (for startups)**  \n   If you are a student or part of a startup, AWS offers **free credits** that may cover larger instances.\n\nWould you like me to modify the instance selection logic to default to Free Tier options when necessary?\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","embed-resources":true,"output-file":"discovery.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.40","subtitle":"Scaled VM Selection Application","author":[{"name":"John Leonard","email":"jdleonard@vcu.edu"}],"date":"last-modified","theme":"cosmo","title":"Discovery"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}